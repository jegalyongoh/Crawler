import gzip
import base64
import pymysql

conn = pymysql.connect(host='127.0.0.1', port=3307, user='root', passwd='a1234', db='bucketlist', charset='utf8')
cur = conn.cursor()

def hashzip(encode_):
    longtext = encode_          # 인코딩 되어있는 이미지 
    id_ = 1
    name = 'TEST'
    data = gzip.compress(longtext)     # 압축화
    # data = data.replace("'", "\'")
    print(data)
    redata = gzip.decompress(data)
    print(redata)
    query = 'insert into zip_test values('+str(id_)+',"'+name+'",%s)'
    print(query, (data))
    cur.execute(query, (data))
    conn.commit()
    print('hash: '+ str(len(longtext))) # 압축되기전의 hash 글자수
    print('zip : '+ str(len(data)))     # 압축후    글자수
    # with open('../../output/hash/hash.txt', 'wt') as f:     
    #     f.write(str(longtext))      # 용량 확인을 위해 txt파일로 저장
    # with open('../../output/hash/hashzip.txt', 'wt') as f:
    #     f.write(str(data))          # 용량 확인을 위해 txt파일로 저장

if __name__ == '__main__':
    test = b'iVBORw0KGgoAAAANSUhEUgAAAGAAAAAhCAYAAAAmnK7xAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABVhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M2IChXaW5kb3dzKSIgeG1wOkNyZWF0ZURhdGU9IjIwMTYtMTEtMTRUMDk6NDQ6MTQrMDk6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDE2LTExLTE1VDE1OjQ3OjUxKzA5OjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDE2LTExLTE1VDE1OjQ3OjUxKzA5OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2RDZFNDFBN0FBRkYxMUU2QjAxNTkyNzdBNUIzMEUxOSIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRp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'
    # 테스트 hash
    hashzip(test)